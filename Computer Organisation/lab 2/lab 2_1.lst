     1                                  %include "io.mac"
     2                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     3                              <1> extern   proc_GetStr, proc_GetCh
     4                              <1> extern   proc_PutInt, proc_GetInt
     5                              <1> extern   proc_PutLInt, proc_GetLInt
     6                              <1> 
     7                              <1> ;;-------------------------------------------------------------------
     8                              <1> %macro  .STARTUP  0
     9                              <1> ;group dgroup .data .bss
    10                              <1>         global   _start
    11                              <1> _start:
    12                              <1> %endmacro
    13                              <1> ;;-------------------------------------------------------------------
    14                              <1> 
    15                              <1> 
    16                              <1> ;;-------------------------------------------------------------------
    17                              <1> %macro  .EXIT  0
    18                              <1>         mov    EAX,1
    19                              <1>         xor    EBX,EBX
    20                              <1>         int    0x80
    21                              <1> %endmacro
    22                              <1> ;;-------------------------------------------------------------------
    23                              <1> 
    24                              <1> 
    25                              <1> ;;-------------------------------------------------------------------
    26                              <1> %macro  .DATA 0
    27                              <1>         segment .data
    28                              <1> %endmacro
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> 
    31                              <1> ;;-------------------------------------------------------------------
    32                              <1> %macro  .UDATA 0
    33                              <1>         segment .bss
    34                              <1> %endmacro
    35                              <1> ;;-------------------------------------------------------------------
    36                              <1> 
    37                              <1> ;;-------------------------------------------------------------------
    38                              <1> %macro  .CODE 0
    39                              <1>         segment .data
    40                              <1>         segment .bss
    41                              <1>         segment .text
    42                              <1> %endmacro
    43                              <1> ;;-------------------------------------------------------------------
    44                              <1> 
    45                              <1> 
    46                              <1> ;;-------------------------------------------------------------------
    47                              <1> %macro  nwln  0 
    48                              <1>         call    proc_nwln
    49                              <1> %endmacro
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> 
    52                              <1> 
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> %macro  PutCh  1 
    55                              <1>         push    AX
    56                              <1>         mov     AL,%1
    57                              <1>         call    proc_PutCh
    58                              <1>         pop     AX
    59                              <1> %endmacro
    60                              <1> ;;-------------------------------------------------------------------
    61                              <1> 
    62                              <1> 
    63                              <1> ;;-------------------------------------------------------------------
    64                              <1> %macro  PutStr  1 
    65                              <1>         push    ECX
    66                              <1>         mov     ECX,%1
    67                              <1>         call    proc_PutStr
    68                              <1>         pop     ECX
    69                              <1> %endmacro
    70                              <1> ;;-------------------------------------------------------------------
    71                              <1> 
    72                              <1> 
    73                              <1> ;;-------------------------------------------------------------------
    74                              <1> %macro  GetStr  1-2 81
    75                              <1>         push    ESI
    76                              <1>         push    EDI
    77                              <1>         mov     EDI,%1
    78                              <1>         mov     ESI,%2
    79                              <1>         call    proc_GetStr
    80                              <1>         pop     EDI
    81                              <1>         pop     ESI
    82                              <1> %endmacro
    83                              <1> ;;-------------------------------------------------------------------
    84                              <1> 
    85                              <1> 
    86                              <1> ;;-------------------------------------------------------------------
    87                              <1> %macro  GetCh   1
    88                              <1>         push    SI
    89                              <1>         xor     SI,SI
    90                              <1> %ifidni %1,AL
    91                              <1>         ;inc     SI
    92                              <1>         call    proc_GetCh
    93                              <1> %elifidni %1,AH
    94                              <1>         mov     SI,1
    95                              <1>         call    proc_GetCh
    96                              <1> %else
    97                              <1>         push    AX
    98                              <1>         call    proc_GetCh
    99                              <1>         mov     %1,AL
   100                              <1>         pop     AX
   101                              <1> %endif
   102                              <1>         pop     SI
   103                              <1> %endmacro
   104                              <1> ;;-------------------------------------------------------------------
   105                              <1> 
   106                              <1> 
   107                              <1> ;;-------------------------------------------------------------------
   108                              <1> %macro  PutInt  1
   109                              <1>         push    AX
   110                              <1>         mov     AX,%1
   111                              <1>         call    proc_PutInt
   112                              <1>         pop     AX
   113                              <1> %endmacro
   114                              <1> ;;-------------------------------------------------------------------
   115                              <1> 
   116                              <1> 
   117                              <1> ;;-------------------------------------------------------------------
   118                              <1> %macro  GetInt  1
   119                              <1> %ifnidni %1,AX
   120                              <1>         push    AX
   121                              <1>         call    proc_GetInt
   122                              <1>         mov     %1,AX
   123                              <1> 	  pop     AX
   124                              <1> %else 
   125                              <1>         call  proc_GetInt
   126                              <1> %endif
   127                              <1> %endmacro
   128                              <1> ;;-------------------------------------------------------------------
   129                              <1> 
   130                              <1> ;;-------------------------------------------------------------------
   131                              <1> %macro  PutLInt  1
   132                              <1>         push    EAX
   133                              <1>         mov     EAX,%1
   134                              <1>         call    proc_PutLInt
   135                              <1>         pop     EAX
   136                              <1> %endmacro
   137                              <1> ;;-------------------------------------------------------------------
   138                              <1> 
   139                              <1> ;;-------------------------------------------------------------------
   140                              <1> %macro  GetLInt  1
   141                              <1> %ifnidni %1,EAX
   142                              <1>         push    EAX
   143                              <1>         call    proc_GetLInt
   144                              <1>         mov     %1,EAX
   145                              <1> 	  pop     EAX
   146                              <1> %else 
   147                              <1>         call  proc_GetLInt
   148                              <1> %endif
   149                              <1> %endmacro
   150                              <1> ;;-------------------------------------------------------------------
   151                              <1> 
   152                                  
   153                                  	.DATA
   154                              <1>  segment .data
   155 00000000 506C6561736520656E-     		msg1	db	"Please enter the string : ",0
   156 00000009 746572207468652073-
   157 00000012 7472696E67203A2000 
   158 0000001B 4C656E677468206F66-     		msg2	db	"Length of String: ",0
   159 00000024 20537472696E673A20-
   160 0000002D 00                 
   161 0000002E 456E63727970746564-     		msg3	db	"Encrypted String: ",0	
   162 00000037 20537472696E673A20-
   163 00000040 00                 
   164 00000041 5465726D696E617465-     		msg4	db	"Terminate the Program[Y/N] ",0
   165 0000004A 207468652050726F67-
   166 00000053 72616D5B592F4E5D20-
   167 0000005C 00                 
   168 0000005D 496E76616C69642049-     		msg5	db	"Invalid Input! ",0
   169 00000066 6E707574212000     
   170 0000006D 45786974696E672E2E-     		msg6	db	"Exiting.............",0
   171 00000076 2E2E2E2E2E2E2E2E2E-
   172 0000007F 2E2E00             
   173                                  
   174                                  	.UDATA
   175                              <1>  segment .bss
   176 00000000 <res 00000050>          		string1 resb	80
   177 00000050 <res 00000001>          		strlen	resb	1
   178 00000051 <res 00000001>          		check	resb	1
   179 00000052 <res 00000002>          		string2	resb	2
   180                                  
   181                                  	.CODE
   182                              <1>  segment .data
   183                              <1>  segment .bss
   184                              <1>  segment .text
   185                                  		.STARTUP
   186                              <1> 
   187                              <1>  global _start
   188                              <1> _start:
   189                                  			
   190                                  		loop:
   191                                  			nwln
   192 00000000 E8(00000000)        <1>  call proc_nwln
   193                                  			PutStr	msg1
   194 00000005 51                  <1>  push ECX
   195 00000006 B9[00000000]        <1>  mov ECX,%1
   196 0000000B E8(00000000)        <1>  call proc_PutStr
   197 00000010 59                  <1>  pop ECX
   198                                  			GetStr	string1
   199 00000011 56                  <1>  push ESI
   200 00000012 57                  <1>  push EDI
   201 00000013 BF[00000000]        <1>  mov EDI,%1
   202 00000018 BE51000000          <1>  mov ESI,%2
   203 0000001D E8(00000000)        <1>  call proc_GetStr
   204 00000022 5F                  <1>  pop EDI
   205 00000023 5E                  <1>  pop ESI
   206                                  			nwln
   207 00000024 E8(00000000)        <1>  call proc_nwln
   208                                  			
   209 00000029 E8D1000000              			call getLength
   210                                  			PutStr msg2
   211 0000002E 51                  <1>  push ECX
   212 0000002F B9[1B000000]        <1>  mov ECX,%1
   213 00000034 E8(00000000)        <1>  call proc_PutStr
   214 00000039 59                  <1>  pop ECX
   215                                  			PutInt [strlen]
   216 0000003A 6650                <1>  push AX
   217 0000003C 66A1[50000000]      <1>  mov AX,%1
   218 00000042 E8(00000000)        <1>  call proc_PutInt
   219 00000047 6658                <1>  pop AX
   220                                  			nwln
   221 00000049 E8(00000000)        <1>  call proc_nwln
   222                                  			nwln	
   223 0000004E E8(00000000)        <1>  call proc_nwln
   224                                  
   225 00000053 BE[00000000]            			mov esi,string1
   226 00000058 BF[00000000]            			mov edi,string1
   227 0000005D A1[50000000]            			mov eax , [strlen]
   228                                  		
   229 00000062 E8AF000000              			call solve
   230                                  			PutStr msg3
   231 00000067 51                  <1>  push ECX
   232 00000068 B9[2E000000]        <1>  mov ECX,%1
   233 0000006D E8(00000000)        <1>  call proc_PutStr
   234 00000072 59                  <1>  pop ECX
   235                                  			PutStr string1
   236 00000073 51                  <1>  push ECX
   237 00000074 B9[00000000]        <1>  mov ECX,%1
   238 00000079 E8(00000000)        <1>  call proc_PutStr
   239 0000007E 59                  <1>  pop ECX
   240                                  			nwln
   241 0000007F E8(00000000)        <1>  call proc_nwln
   242                                  			nwln
   243 00000084 E8(00000000)        <1>  call proc_nwln
   244                                  			
   245                                  			PutStr msg4
   246 00000089 51                  <1>  push ECX
   247 0000008A B9[41000000]        <1>  mov ECX,%1
   248 0000008F E8(00000000)        <1>  call proc_PutStr
   249 00000094 59                  <1>  pop ECX
   250                                  			GetStr string2
   251 00000095 56                  <1>  push ESI
   252 00000096 57                  <1>  push EDI
   253 00000097 BF[52000000]        <1>  mov EDI,%1
   254 0000009C BE51000000          <1>  mov ESI,%2
   255 000000A1 E8(00000000)        <1>  call proc_GetStr
   256 000000A6 5F                  <1>  pop EDI
   257 000000A7 5E                  <1>  pop ESI
   258 000000A8 803D[52000000]59        			cmp byte [string2] , 'Y'
   259 000000AF 742F                    			je	terminate
   260 000000B1 803D[52000000]79        			cmp byte [string2] , 'y'
   261 000000B8 7426                    			je	terminate
   262 000000BA 803D[52000000]4E        			cmp byte [string2] , 'N'
   263 000000C1 0F8439FFFFFF            			je	loop
   264 000000C7 803D[52000000]6E        			cmp byte [string2] , 'n'
   265 000000CE 0F842CFFFFFF            			je	loop
   266                                  			PutStr msg5
   267 000000D4 51                  <1>  push ECX
   268 000000D5 B9[5D000000]        <1>  mov ECX,%1
   269 000000DA E8(00000000)        <1>  call proc_PutStr
   270 000000DF 59                  <1>  pop ECX
   271                                  
   272                                  		terminate:
   273                                  			nwln
   274 000000E0 E8(00000000)        <1>  call proc_nwln
   275                                  			PutStr msg6
   276 000000E5 51                  <1>  push ECX
   277 000000E6 B9[6D000000]        <1>  mov ECX,%1
   278 000000EB E8(00000000)        <1>  call proc_PutStr
   279 000000F0 59                  <1>  pop ECX
   280                                  			nwln
   281 000000F1 E8(00000000)        <1>  call proc_nwln
   282                                  			
   283                                  		.EXIT
   284 000000F6 B801000000          <1>  mov EAX,1
   285 000000FB 31DB                <1>  xor EBX,EBX
   286 000000FD CD80                <1>  int 0x80
   287                                  ;.......................................................................
   288                                  
   289                                  
   290                                  
   291                                  ;.......................................................................
   292                                  ;Function to calculate length of string
   293                                  ;.......................................................................
   294                                  	getLength:
   295 000000FF BB[00000000]            		mov ebx,string1
   296 00000104 89D8                    		mov eax,ebx
   297                                  		
   298                                  		top:	
   299 00000106 803800                  			cmp byte [eax],0
   300 00000109 7403                    			jz done
   301 0000010B 40                      			inc eax
   302 0000010C EBF8                    			jmp top
   303                                  		
   304                                  		done:
   305 0000010E 29D8                    			sub eax,ebx
   306 00000110 A3[50000000]            			mov [strlen],eax		; strlen contains length of string
   307 00000115 C3                      			ret
   308                                  ;.......................................................................
   309                                  ;.......................................................................
   310                                  
   311                                  
   312                                  
   313                                  ;.......................................................................
   314                                  ;Function to generate Encrypted String
   315                                  ;.......................................................................
   316                                  	GenerateString:
   317                                  		
   318                                  		solve:
   319 00000116 83F800                  			cmp eax,0
   320 00000119 0F84D1000000            			je end
   321 0000011F 48                      			dec eax
   322                                  		
   323 00000120 AC                      			lodsb
   324 00000121 C605[51000000]30        			mov byte [check],'0'
   325                                  		
   326 00000128 3C30                    			cmp al,'0'
   327 0000012A 743A                    			je	cmp0
   328                                  		
   329 0000012C 3C31                    			cmp al,'1'
   330 0000012E 7442                    			je	cmp1
   331                                  		
   332 00000130 3C32                    			cmp al,'2'
   333 00000132 744A                    			je	cmp2
   334                                  		
   335 00000134 3C33                    			cmp al,'3'
   336 00000136 7452                    			je	cmp3
   337                                  		
   338 00000138 3C34                    			cmp al,'4'
   339 0000013A 745A                    			je	cmp4
   340                                  		
   341 0000013C 3C35                    			cmp al,'5'
   342 0000013E 7465                    			je	cmp5
   343                                  		
   344 00000140 3C36                    			cmp al,'6'
   345 00000142 7470                    			je	cmp6
   346                                  		
   347 00000144 3C37                    			cmp al,'7'
   348 00000146 747B                    			je	cmp7
   349                                  		
   350 00000148 3C38                    			cmp al,'8'
   351 0000014A 0F8482000000            			je	cmp8
   352                                  		
   353 00000150 3C39                    			cmp al,'9'
   354 00000152 0F8489000000            			je	cmp9
   355                                  		
   356 00000158 803D[51000000]30        			cmp byte [check],'0'
   357 0000015F 7402                    			je char
   358                                  		
   359 00000161 EBB3                    			jmp solve
   360                                  		
   361                                  		char:
   362 00000163 47                      			inc edi
   363 00000164 EBB0                    			jmp solve
   364                                  		
   365                                  		cmp0:
   366 00000166 B034                    			mov al,'4'
   367 00000168 C605[51000000]31        			mov byte [check],'1'
   368 0000016F AA                      			stosb
   369 00000170 EBA4                    			jmp solve
   370                                  		
   371                                  		cmp1:
   372 00000172 B036                    			mov al,'6'
   373 00000174 C605[51000000]31        			mov byte [check],'1'
   374 0000017B AA                      			stosb
   375 0000017C EB98                    			jmp solve
   376                                  		
   377                                  		cmp2:
   378 0000017E B039                    			mov al,'9'
   379 00000180 C605[51000000]31        			mov byte [check],'1'
   380 00000187 AA                      			stosb
   381 00000188 EB8C                    			jmp solve
   382                                  		
   383                                  		cmp3:
   384 0000018A B035                    			mov al,'5'
   385 0000018C C605[51000000]31        			mov byte [check],'1'
   386 00000193 AA                      			stosb
   387 00000194 EB80                    			jmp solve
   388                                  		
   389                                  		cmp4:
   390 00000196 B030                    			mov al,'0'
   391 00000198 C605[51000000]31        			mov byte [check],'1'
   392 0000019F AA                      			stosb
   393 000001A0 E971FFFFFF              			jmp solve
   394                                  		
   395                                  		cmp5:
   396 000001A5 B033                    			mov al,'3'
   397 000001A7 C605[51000000]31        			mov byte [check],'1'
   398 000001AE AA                      			stosb
   399 000001AF E962FFFFFF              			jmp solve
   400                                  		
   401                                  		cmp6:
   402 000001B4 B031                    			mov al,'1'
   403 000001B6 C605[51000000]31        			mov byte [check],'1'
   404 000001BD AA                      			stosb
   405 000001BE E953FFFFFF              			jmp solve
   406                                  		
   407                                  		cmp7:
   408 000001C3 B038                    			mov al,'8'
   409 000001C5 C605[51000000]31        			mov byte [check],'1'
   410 000001CC AA                      			stosb
   411 000001CD E944FFFFFF              			jmp solve
   412                                  		
   413                                  		cmp8:
   414 000001D2 B037                    			mov al,'7'
   415 000001D4 C605[51000000]31        			mov byte [check],'1'
   416 000001DB AA                      			stosb
   417 000001DC E935FFFFFF              			jmp solve
   418                                  		
   419                                  		cmp9:
   420 000001E1 B032                    			mov al,'2'
   421 000001E3 C605[51000000]31        			mov byte [check],'1'
   422 000001EA AA                      			stosb
   423 000001EB E926FFFFFF              			jmp solve	
   424                                  		
   425                                  		end:
   426 000001F0 C3                      			ret
   427                                  ;.......................................................................
   428                                  ;.......................................................................
