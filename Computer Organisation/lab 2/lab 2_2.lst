     1                                  %include "io.mac"
     2                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     3                              <1> extern   proc_GetStr, proc_GetCh
     4                              <1> extern   proc_PutInt, proc_GetInt
     5                              <1> extern   proc_PutLInt, proc_GetLInt
     6                              <1> 
     7                              <1> ;;-------------------------------------------------------------------
     8                              <1> %macro  .STARTUP  0
     9                              <1> ;group dgroup .data .bss
    10                              <1>         global   _start
    11                              <1> _start:
    12                              <1> %endmacro
    13                              <1> ;;-------------------------------------------------------------------
    14                              <1> 
    15                              <1> 
    16                              <1> ;;-------------------------------------------------------------------
    17                              <1> %macro  .EXIT  0
    18                              <1>         mov    EAX,1
    19                              <1>         xor    EBX,EBX
    20                              <1>         int    0x80
    21                              <1> %endmacro
    22                              <1> ;;-------------------------------------------------------------------
    23                              <1> 
    24                              <1> 
    25                              <1> ;;-------------------------------------------------------------------
    26                              <1> %macro  .DATA 0
    27                              <1>         segment .data
    28                              <1> %endmacro
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> 
    31                              <1> ;;-------------------------------------------------------------------
    32                              <1> %macro  .UDATA 0
    33                              <1>         segment .bss
    34                              <1> %endmacro
    35                              <1> ;;-------------------------------------------------------------------
    36                              <1> 
    37                              <1> ;;-------------------------------------------------------------------
    38                              <1> %macro  .CODE 0
    39                              <1>         segment .data
    40                              <1>         segment .bss
    41                              <1>         segment .text
    42                              <1> %endmacro
    43                              <1> ;;-------------------------------------------------------------------
    44                              <1> 
    45                              <1> 
    46                              <1> ;;-------------------------------------------------------------------
    47                              <1> %macro  nwln  0 
    48                              <1>         call    proc_nwln
    49                              <1> %endmacro
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> 
    52                              <1> 
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> %macro  PutCh  1 
    55                              <1>         push    AX
    56                              <1>         mov     AL,%1
    57                              <1>         call    proc_PutCh
    58                              <1>         pop     AX
    59                              <1> %endmacro
    60                              <1> ;;-------------------------------------------------------------------
    61                              <1> 
    62                              <1> 
    63                              <1> ;;-------------------------------------------------------------------
    64                              <1> %macro  PutStr  1 
    65                              <1>         push    ECX
    66                              <1>         mov     ECX,%1
    67                              <1>         call    proc_PutStr
    68                              <1>         pop     ECX
    69                              <1> %endmacro
    70                              <1> ;;-------------------------------------------------------------------
    71                              <1> 
    72                              <1> 
    73                              <1> ;;-------------------------------------------------------------------
    74                              <1> %macro  GetStr  1-2 81
    75                              <1>         push    ESI
    76                              <1>         push    EDI
    77                              <1>         mov     EDI,%1
    78                              <1>         mov     ESI,%2
    79                              <1>         call    proc_GetStr
    80                              <1>         pop     EDI
    81                              <1>         pop     ESI
    82                              <1> %endmacro
    83                              <1> ;;-------------------------------------------------------------------
    84                              <1> 
    85                              <1> 
    86                              <1> ;;-------------------------------------------------------------------
    87                              <1> %macro  GetCh   1
    88                              <1>         push    SI
    89                              <1>         xor     SI,SI
    90                              <1> %ifidni %1,AL
    91                              <1>         ;inc     SI
    92                              <1>         call    proc_GetCh
    93                              <1> %elifidni %1,AH
    94                              <1>         mov     SI,1
    95                              <1>         call    proc_GetCh
    96                              <1> %else
    97                              <1>         push    AX
    98                              <1>         call    proc_GetCh
    99                              <1>         mov     %1,AL
   100                              <1>         pop     AX
   101                              <1> %endif
   102                              <1>         pop     SI
   103                              <1> %endmacro
   104                              <1> ;;-------------------------------------------------------------------
   105                              <1> 
   106                              <1> 
   107                              <1> ;;-------------------------------------------------------------------
   108                              <1> %macro  PutInt  1
   109                              <1>         push    AX
   110                              <1>         mov     AX,%1
   111                              <1>         call    proc_PutInt
   112                              <1>         pop     AX
   113                              <1> %endmacro
   114                              <1> ;;-------------------------------------------------------------------
   115                              <1> 
   116                              <1> 
   117                              <1> ;;-------------------------------------------------------------------
   118                              <1> %macro  GetInt  1
   119                              <1> %ifnidni %1,AX
   120                              <1>         push    AX
   121                              <1>         call    proc_GetInt
   122                              <1>         mov     %1,AX
   123                              <1> 	  pop     AX
   124                              <1> %else 
   125                              <1>         call  proc_GetInt
   126                              <1> %endif
   127                              <1> %endmacro
   128                              <1> ;;-------------------------------------------------------------------
   129                              <1> 
   130                              <1> ;;-------------------------------------------------------------------
   131                              <1> %macro  PutLInt  1
   132                              <1>         push    EAX
   133                              <1>         mov     EAX,%1
   134                              <1>         call    proc_PutLInt
   135                              <1>         pop     EAX
   136                              <1> %endmacro
   137                              <1> ;;-------------------------------------------------------------------
   138                              <1> 
   139                              <1> ;;-------------------------------------------------------------------
   140                              <1> %macro  GetLInt  1
   141                              <1> %ifnidni %1,EAX
   142                              <1>         push    EAX
   143                              <1>         call    proc_GetLInt
   144                              <1>         mov     %1,EAX
   145                              <1> 	  pop     EAX
   146                              <1> %else 
   147                              <1>         call  proc_GetLInt
   148                              <1> %endif
   149                              <1> %endmacro
   150                              <1> ;;-------------------------------------------------------------------
   151                              <1> 
   152                                  
   153                                  ;.......................................................................
   154                                  	.DATA
   155                              <1>  segment .data
   156 00000000 506C6561736520656E-     		msg1	db	"Please enter the string : ",0
   157 00000009 746572207468652073-
   158 00000012 7472696E67203A2000 
   159 0000001B 4C656E677468206F66-     		msg2	db	"Length of String: ",0
   160 00000024 20537472696E673A20-
   161 0000002D 00                 
   162 0000002E 537472696E67206973-     		msg3	db	"String is a Palindrome ",0	
   163 00000037 20612050616C696E64-
   164 00000040 726F6D652000       
   165 00000046 5465726D696E617465-     		msg4	db	"Terminate the Program[Y/N] ",0
   166 0000004F 207468652050726F67-
   167 00000058 72616D5B592F4E5D20-
   168 00000061 00                 
   169 00000062 496E76616C69642049-     		msg5	db	"Invalid Input! ",0
   170 0000006B 6E707574212000     
   171 00000072 45786974696E672E2E-     		msg6	db	"Exiting.............",0
   172 0000007B 2E2E2E2E2E2E2E2E2E-
   173 00000084 2E2E00             
   174 00000087 537472696E67206973-     		msg7	db	"String is not a Palindrome ",0
   175 00000090 206E6F742061205061-
   176 00000099 6C696E64726F6D6520-
   177 000000A2 00                 
   178                                  
   179                                  	.UDATA
   180                              <1>  segment .bss
   181 00000000 <res 00000050>          		string1 resb	80
   182 00000050 <res 00000001>          		strlen	resb	1
   183 00000051 <res 00000002>          		string2	resb	2
   184                                  
   185                                  	.CODE
   186                              <1>  segment .data
   187                              <1>  segment .bss
   188                              <1>  segment .text
   189                                  		.STARTUP
   190                              <1> 
   191                              <1>  global _start
   192                              <1> _start:
   193                                  		while:	
   194                                  			nwln
   195 00000000 E8(00000000)        <1>  call proc_nwln
   196                                  			PutStr	msg1
   197 00000005 51                  <1>  push ECX
   198 00000006 B9[00000000]        <1>  mov ECX,%1
   199 0000000B E8(00000000)        <1>  call proc_PutStr
   200 00000010 59                  <1>  pop ECX
   201                                  			GetStr	string1
   202 00000011 56                  <1>  push ESI
   203 00000012 57                  <1>  push EDI
   204 00000013 BF[00000000]        <1>  mov EDI,%1
   205 00000018 BE51000000          <1>  mov ESI,%2
   206 0000001D E8(00000000)        <1>  call proc_GetStr
   207 00000022 5F                  <1>  pop EDI
   208 00000023 5E                  <1>  pop ESI
   209                                  			nwln
   210 00000024 E8(00000000)        <1>  call proc_nwln
   211                                  			
   212 00000029 E8F6000000              			call getLength
   213                                  			PutStr msg2
   214 0000002E 51                  <1>  push ECX
   215 0000002F B9[1B000000]        <1>  mov ECX,%1
   216 00000034 E8(00000000)        <1>  call proc_PutStr
   217 00000039 59                  <1>  pop ECX
   218                                  			PutInt [strlen]
   219 0000003A 6650                <1>  push AX
   220 0000003C 66A1[50000000]      <1>  mov AX,%1
   221 00000042 E8(00000000)        <1>  call proc_PutInt
   222 00000047 6658                <1>  pop AX
   223                                  			nwln
   224 00000049 E8(00000000)        <1>  call proc_nwln
   225                                  			nwln
   226 0000004E E8(00000000)        <1>  call proc_nwln
   227                                  
   228 00000053 E876000000              			call Check_Palindrome
   229                                  
   230                                  			PutStr msg4
   231 00000058 51                  <1>  push ECX
   232 00000059 B9[46000000]        <1>  mov ECX,%1
   233 0000005E E8(00000000)        <1>  call proc_PutStr
   234 00000063 59                  <1>  pop ECX
   235                                  			GetStr string2
   236 00000064 56                  <1>  push ESI
   237 00000065 57                  <1>  push EDI
   238 00000066 BF[51000000]        <1>  mov EDI,%1
   239 0000006B BE51000000          <1>  mov ESI,%2
   240 00000070 E8(00000000)        <1>  call proc_GetStr
   241 00000075 5F                  <1>  pop EDI
   242 00000076 5E                  <1>  pop ESI
   243 00000077 803D[51000000]59        			cmp byte [string2] , 'Y'
   244 0000007E 742F                    			je	terminate1
   245 00000080 803D[51000000]79        			cmp byte [string2] , 'y'
   246 00000087 7426                    			je	terminate1
   247 00000089 803D[51000000]4E        			cmp byte [string2] , 'N'
   248 00000090 0F846AFFFFFF            			je	while
   249 00000096 803D[51000000]6E        			cmp byte [string2] , 'n'
   250 0000009D 0F845DFFFFFF            			je	while
   251                                  			PutStr msg5
   252 000000A3 51                  <1>  push ECX
   253 000000A4 B9[62000000]        <1>  mov ECX,%1
   254 000000A9 E8(00000000)        <1>  call proc_PutStr
   255 000000AE 59                  <1>  pop ECX
   256                                  
   257                                  		terminate1:
   258                                  			nwln
   259 000000AF E8(00000000)        <1>  call proc_nwln
   260                                  			PutStr msg6
   261 000000B4 51                  <1>  push ECX
   262 000000B5 B9[72000000]        <1>  mov ECX,%1
   263 000000BA E8(00000000)        <1>  call proc_PutStr
   264 000000BF 59                  <1>  pop ECX
   265                                  			nwln
   266 000000C0 E8(00000000)        <1>  call proc_nwln
   267                                  		.EXIT	
   268 000000C5 B801000000          <1>  mov EAX,1
   269 000000CA 31DB                <1>  xor EBX,EBX
   270 000000CC CD80                <1>  int 0x80
   271                                  ;.......................................................................
   272                                  
   273                                  
   274                                  
   275                                  ;.......................................................................
   276                                  ;Funtion to check for palindromes
   277                                  ;.......................................................................
   278                                  	Check_Palindrome:
   279 000000CE B8[00000000]            			mov eax,string1
   280 000000D3 8B1D[50000000]          			mov ebx, [strlen]
   281 000000D9 01D8                    			add eax, ebx
   282 000000DB 48                      			dec eax
   283 000000DC 31DB                    			xor ebx, ebx
   284 000000DE BB[00000000]            			mov ebx , string1
   285                                  
   286                                  		start:
   287 000000E3 39C3                    			cmp ebx,eax
   288 000000E5 7E02                    			jle check
   289 000000E7 EB0A                    			jmp palin
   290                                  
   291                                  		check:
   292 000000E9 8A10                    			mov dl, byte[eax]
   293 000000EB 3813                    			cmp byte[ebx], dl
   294 000000ED 751C                    			jne nonpalin
   295 000000EF 43                      			inc ebx
   296 000000F0 48                      			dec eax
   297 000000F1 EBF0                    			jmp start
   298                                  
   299                                  		palin:
   300                                  			nwln
   301 000000F3 E8(00000000)        <1>  call proc_nwln
   302                                  			PutStr msg3
   303 000000F8 51                  <1>  push ECX
   304 000000F9 B9[2E000000]        <1>  mov ECX,%1
   305 000000FE E8(00000000)        <1>  call proc_PutStr
   306 00000103 59                  <1>  pop ECX
   307                                  			nwln
   308 00000104 E8(00000000)        <1>  call proc_nwln
   309 00000109 EB18                    			jmp end
   310                                  
   311                                  		nonpalin:
   312                                  			nwln
   313 0000010B E8(00000000)        <1>  call proc_nwln
   314                                  			PutStr msg7
   315 00000110 51                  <1>  push ECX
   316 00000111 B9[87000000]        <1>  mov ECX,%1
   317 00000116 E8(00000000)        <1>  call proc_PutStr
   318 0000011B 59                  <1>  pop ECX
   319                                  			nwln
   320 0000011C E8(00000000)        <1>  call proc_nwln
   321 00000121 EB00                    			jmp end
   322                                  
   323                                  		end:
   324 00000123 C3                      			ret
   325                                  ;.......................................................................
   326                                  ;.......................................................................
   327                                  
   328                                  
   329                                  
   330                                  
   331                                  
   332                                  ;.......................................................................
   333                                  ;Function to calculate length of string
   334                                  ;.......................................................................
   335                                  	getLength:
   336 00000124 BB[00000000]            		mov ebx,string1
   337 00000129 89D8                    		mov eax,ebx
   338                                  		
   339                                  		top:	
   340 0000012B 803800                  			cmp byte [eax],0
   341 0000012E 7403                    			jz done
   342 00000130 40                      			inc eax
   343 00000131 EBF8                    			jmp top
   344                                  		
   345                                  		done:
   346 00000133 29D8                    			sub eax,ebx
   347 00000135 A3[50000000]            			mov [strlen],eax		; strlen contains length of string
   348 0000013A C3                      			ret
   349                                  ;.......................................................................
   350                                  ;.......................................................................
