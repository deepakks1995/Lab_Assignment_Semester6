     1                                  %include "io.mac"
     2                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     3                              <1> extern   proc_GetStr, proc_GetCh
     4                              <1> extern   proc_PutInt, proc_GetInt
     5                              <1> extern   proc_PutLInt, proc_GetLInt
     6                              <1> 
     7                              <1> ;;-------------------------------------------------------------------
     8                              <1> %macro  .STARTUP  0
     9                              <1> ;group dgroup .data .bss
    10                              <1>         global   _start
    11                              <1> _start:
    12                              <1> %endmacro
    13                              <1> ;;-------------------------------------------------------------------
    14                              <1> 
    15                              <1> 
    16                              <1> ;;-------------------------------------------------------------------
    17                              <1> %macro  .EXIT  0
    18                              <1>         mov    EAX,1
    19                              <1>         xor    EBX,EBX
    20                              <1>         int    0x80
    21                              <1> %endmacro
    22                              <1> ;;-------------------------------------------------------------------
    23                              <1> 
    24                              <1> 
    25                              <1> ;;-------------------------------------------------------------------
    26                              <1> %macro  .DATA 0
    27                              <1>         segment .data
    28                              <1> %endmacro
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> 
    31                              <1> ;;-------------------------------------------------------------------
    32                              <1> %macro  .UDATA 0
    33                              <1>         segment .bss
    34                              <1> %endmacro
    35                              <1> ;;-------------------------------------------------------------------
    36                              <1> 
    37                              <1> ;;-------------------------------------------------------------------
    38                              <1> %macro  .CODE 0
    39                              <1>         segment .data
    40                              <1>         segment .bss
    41                              <1>         segment .text
    42                              <1> %endmacro
    43                              <1> ;;-------------------------------------------------------------------
    44                              <1> 
    45                              <1> 
    46                              <1> ;;-------------------------------------------------------------------
    47                              <1> %macro  nwln  0 
    48                              <1>         call    proc_nwln
    49                              <1> %endmacro
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> 
    52                              <1> 
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> %macro  PutCh  1 
    55                              <1>         push    AX
    56                              <1>         mov     AL,%1
    57                              <1>         call    proc_PutCh
    58                              <1>         pop     AX
    59                              <1> %endmacro
    60                              <1> ;;-------------------------------------------------------------------
    61                              <1> 
    62                              <1> 
    63                              <1> ;;-------------------------------------------------------------------
    64                              <1> %macro  PutStr  1 
    65                              <1>         push    ECX
    66                              <1>         mov     ECX,%1
    67                              <1>         call    proc_PutStr
    68                              <1>         pop     ECX
    69                              <1> %endmacro
    70                              <1> ;;-------------------------------------------------------------------
    71                              <1> 
    72                              <1> 
    73                              <1> ;;-------------------------------------------------------------------
    74                              <1> %macro  GetStr  1-2 81
    75                              <1>         push    ESI
    76                              <1>         push    EDI
    77                              <1>         mov     EDI,%1
    78                              <1>         mov     ESI,%2
    79                              <1>         call    proc_GetStr
    80                              <1>         pop     EDI
    81                              <1>         pop     ESI
    82                              <1> %endmacro
    83                              <1> ;;-------------------------------------------------------------------
    84                              <1> 
    85                              <1> 
    86                              <1> ;;-------------------------------------------------------------------
    87                              <1> %macro  GetCh   1
    88                              <1>         push    SI
    89                              <1>         xor     SI,SI
    90                              <1> %ifidni %1,AL
    91                              <1>         ;inc     SI
    92                              <1>         call    proc_GetCh
    93                              <1> %elifidni %1,AH
    94                              <1>         mov     SI,1
    95                              <1>         call    proc_GetCh
    96                              <1> %else
    97                              <1>         push    AX
    98                              <1>         call    proc_GetCh
    99                              <1>         mov     %1,AL
   100                              <1>         pop     AX
   101                              <1> %endif
   102                              <1>         pop     SI
   103                              <1> %endmacro
   104                              <1> ;;-------------------------------------------------------------------
   105                              <1> 
   106                              <1> 
   107                              <1> ;;-------------------------------------------------------------------
   108                              <1> %macro  PutInt  1
   109                              <1>         push    AX
   110                              <1>         mov     AX,%1
   111                              <1>         call    proc_PutInt
   112                              <1>         pop     AX
   113                              <1> %endmacro
   114                              <1> ;;-------------------------------------------------------------------
   115                              <1> 
   116                              <1> 
   117                              <1> ;;-------------------------------------------------------------------
   118                              <1> %macro  GetInt  1
   119                              <1> %ifnidni %1,AX
   120                              <1>         push    AX
   121                              <1>         call    proc_GetInt
   122                              <1>         mov     %1,AX
   123                              <1> 	  pop     AX
   124                              <1> %else 
   125                              <1>         call  proc_GetInt
   126                              <1> %endif
   127                              <1> %endmacro
   128                              <1> ;;-------------------------------------------------------------------
   129                              <1> 
   130                              <1> ;;-------------------------------------------------------------------
   131                              <1> %macro  PutLInt  1
   132                              <1>         push    EAX
   133                              <1>         mov     EAX,%1
   134                              <1>         call    proc_PutLInt
   135                              <1>         pop     EAX
   136                              <1> %endmacro
   137                              <1> ;;-------------------------------------------------------------------
   138                              <1> 
   139                              <1> ;;-------------------------------------------------------------------
   140                              <1> %macro  GetLInt  1
   141                              <1> %ifnidni %1,EAX
   142                              <1>         push    EAX
   143                              <1>         call    proc_GetLInt
   144                              <1>         mov     %1,EAX
   145                              <1> 	  pop     EAX
   146                              <1> %else 
   147                              <1>         call  proc_GetLInt
   148                              <1> %endif
   149                              <1> %endmacro
   150                              <1> ;;-------------------------------------------------------------------
   151                              <1> 
   152                                  	
   153                                  	.DATA
   154                              <1>  segment .data
   155 00000000 506C6561736520656E-     		msg1	db	"Please enter the number : ",0
   156 00000009 74657220746865206E-
   157 00000012 756D626572203A2000 
   158 0000001B 546F74616C2053756D-     		msg2	db	"Total Sum of above numbers: ",0
   159 00000024 206F662061626F7665-
   160 0000002D 206E756D626572733A-
   161 00000036 2000               
   162 00000038 456E74657220746F74-     		msg3	db	"Enter total number of numbers: ",0
   163 00000041 616C206E756D626572-
   164 0000004A 206F66206E756D6265-
   165 00000053 72733A2000         
   166 00000058 51756F7469656E743A-     		msg4	db	"Quotient: ",0
   167 00000061 2000               
   168 00000063 52656D61696E646572-     		msg5	db	"Remainder: ",0
   169 0000006C 3A2000             
   170                                  	.UDATA
   171                              <1>  segment .bss
   172 00000000 <res 00000004>          		number1	resd	1
   173                                  	
   174                                  	.CODE
   175                              <1>  segment .data
   176                              <1>  segment .bss
   177                              <1>  segment .text
   178                                  		.STARTUP
   179                              <1> 
   180                              <1>  global _start
   181                              <1> _start:
   182                                  		PutStr msg3	; request total numbers
   183 00000000 51                  <1>  push ECX
   184 00000001 B9[38000000]        <1>  mov ECX,%1
   185 00000006 E8(00000000)        <1>  call proc_PutStr
   186 0000000B 59                  <1>  pop ECX
   187                                  		GetInt DX	; DX = total number
   188                              <1> %ifnidni %1,AX
   189 0000000C 6650                <1>  push AX
   190 0000000E E8(00000000)        <1>  call proc_GetInt
   191 00000013 6689C2              <1>  mov %1,AX
   192 00000016 6658                <1>  pop AX
   193                              <1> %else
   194                              <1>  call proc_GetInt
   195                              <1> %endif
   196 00000018 6689D1                  		mov CX,DX
   197 0000001B 66B80000                		mov AX,0
   198                                  		loop:
   199                                  			PutStr msg1	;
   200 0000001F 51                  <1>  push ECX
   201 00000020 B9[00000000]        <1>  mov ECX,%1
   202 00000025 E8(00000000)        <1>  call proc_PutStr
   203 0000002A 59                  <1>  pop ECX
   204                                  			GetInt BX	;
   205                              <1> %ifnidni %1,AX
   206 0000002B 6650                <1>  push AX
   207 0000002D E8(00000000)        <1>  call proc_GetInt
   208 00000032 6689C3              <1>  mov %1,AX
   209 00000035 6658                <1>  pop AX
   210                              <1> %else
   211                              <1>  call proc_GetInt
   212                              <1> %endif
   213 00000037 6601D8                  			add AX,BX	;
   214 0000003A 664A                    			dec DX		;
   215 0000003C 75E1                    			jnz loop
   216                                  		nwln
   217 0000003E E8(00000000)        <1>  call proc_nwln
   218                                  		PutStr msg2
   219 00000043 51                  <1>  push ECX
   220 00000044 B9[1B000000]        <1>  mov ECX,%1
   221 00000049 E8(00000000)        <1>  call proc_PutStr
   222 0000004E 59                  <1>  pop ECX
   223                                  		PutInt AX
   224 0000004F 6650                <1>  push AX
   225 00000051 6689C0              <1>  mov AX,%1
   226 00000054 E8(00000000)        <1>  call proc_PutInt
   227 00000059 6658                <1>  pop AX
   228                                  	
   229                                  		nwln
   230 0000005B E8(00000000)        <1>  call proc_nwln
   231 00000060 66BA0000                		mov DX,0
   232 00000064 66F7F1                  		div CX
   233                                  		PutStr msg4
   234 00000067 51                  <1>  push ECX
   235 00000068 B9[58000000]        <1>  mov ECX,%1
   236 0000006D E8(00000000)        <1>  call proc_PutStr
   237 00000072 59                  <1>  pop ECX
   238                                  		PutInt AX
   239 00000073 6650                <1>  push AX
   240 00000075 6689C0              <1>  mov AX,%1
   241 00000078 E8(00000000)        <1>  call proc_PutInt
   242 0000007D 6658                <1>  pop AX
   243                                  		nwln 
   244 0000007F E8(00000000)        <1>  call proc_nwln
   245                                  		PutStr msg5
   246 00000084 51                  <1>  push ECX
   247 00000085 B9[63000000]        <1>  mov ECX,%1
   248 0000008A E8(00000000)        <1>  call proc_PutStr
   249 0000008F 59                  <1>  pop ECX
   250                                  		PutInt DX
   251 00000090 6650                <1>  push AX
   252 00000092 6689D0              <1>  mov AX,%1
   253 00000095 E8(00000000)        <1>  call proc_PutInt
   254 0000009A 6658                <1>  pop AX
   255                                  		nwln
   256 0000009C E8(00000000)        <1>  call proc_nwln
   257                                  		done:
   258                                  		.EXIT
   259 000000A1 B801000000          <1>  mov EAX,1
   260 000000A6 31DB                <1>  xor EBX,EBX
   261 000000A8 CD80                <1>  int 0x80
   262                                  
   263                                  			
